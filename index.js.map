{"version":3,"file":"index.js","sources":["../src/js/pixabay-api.js","../src/js/render-functions.js","../src/main.js"],"sourcesContent":["// js/pixabay-api.js\nimport axios from 'axios';\n\n// Ваш унікальний ключ доступу до API Pixabay\n// Увага: у реальних проектах ключі API не зберігають прямо в коді!\nconst API_KEY = '50196951-391601c250e619b024764c208'; // <-- ЗАМІНІТЬ НА ВАШ КЛЮЧ!\nconst BASE_URL = 'https://pixabay.com/api/';\n\n/**\n * Виконує HTTP-запит до Pixabay API для пошуку зображень з пагінацією.\n * @param {string} query - Пошукове слово.\n * @param {number} page - Номер сторінки результатів.\n * @returns {Promise<object>} - Проміс, що резолвиться з об'єктом відповіді (властивість data),\n * що містить масив hits та totalHits.\n * @throws {Error} - Кидає помилку, якщо запит не вдається.\n */\nexport async function getImagesByQuery(query, page) {\n  // Параметри запиту згідно з ТЗ, включаючи пагінацію\n  const params = {\n    key: API_KEY,\n    q: query,\n    image_type: 'photo',\n    orientation: 'horizontal',\n    safesearch: true,\n    page: page, // Додаємо параметр сторінки\n    per_page: 15, // Встановлюємо кількість елементів на сторінці (15)\n  };\n\n  try {\n    // Виконуємо GET запит за допомогою Axios\n    const response = await axios.get(BASE_URL, { params });\n\n    // Axios автоматично обробляє успішні відповіді (статус 2xx)\n    // Повертаємо об'єкт data з відповіді, який містить hits та totalHits\n    return response.data;\n\n  } catch (error) {\n    // Обробка помилок мережі або помилок відповіді від сервера\n    console.error('Помилка під час запиту до Pixabay API:', error);\n    // Кидаємо помилку далі, щоб її обробив main.js\n    throw error;\n  }\n}\n","// js/render-functions.js\nimport SimpleLightbox from \"simplelightbox\";\nimport \"simplelightbox/dist/simple-lightbox.min.css\";\n\n// Знаходимо контейнер для галереї в DOM\nconst galleryElement = document.querySelector('.gallery');\n\n// Знаходимо елемент лоадера в DOM\nconst loaderElement = document.querySelector('.loader'); // Переконайтеся, що у вас є елемент з класом 'loader' в HTML\n\n// Знаходимо кнопку \"Load more\"\nconst loadMoreButton = document.querySelector('.load-more-button'); // Переконайтеся, що у вас є кнопка з класом 'load-more-button'\n\n// Створюємо екземпляр SimpleLightbox\n// Ініціалізуємо його на посиланнях всередині галереї\nconst lightbox = new SimpleLightbox('.gallery a', {\n    captionsData: 'alt', // Використовуємо атрибут alt зображення як підпис\n    captionDelay: 250,   // Затримка в мілісекундах перед появою підпису\n});\n\n/**\n * Створює HTML-розмітку для однієї картки зображення.\n * @param {object} image - Об'єкт зображення з API.\n * @returns {string} - Рядок з HTML-розміткою картки.\n */\nfunction createImageCard({ webformatURL, largeImageURL, tags, likes, views, comments, downloads }) {\n  return `\n    <li class=\"gallery-item\">\n      <a href=\"${largeImageURL}\">\n        <img src=\"${webformatURL}\" alt=\"${tags}\" />\n      </a>\n      <div class=\"info\">\n        <p class=\"info-item\"><b>Likes</b> ${likes}</p>\n        <p class=\"info-item\"><b>Views</b> ${views}</p>\n        <p class=\"info-item\"><b>Comments</b> ${comments}</p>\n        <p class=\"info-item\"><b>Downloads</b> ${downloads}</p>\n      </div>\n    </li>\n  `;\n}\n\n/**\n * Додає HTML-розмітку для нових зображень в кінець контейнера галереї.\n * Оновлює SimpleLightbox.\n * @param {array} images - Масив об'єктів зображень для додавання.\n */\nexport function appendGalleryMarkup(images) {\n  // Перевіряємо, чи отримано масив зображень і чи він не порожній\n  if (!images || images.length === 0) {\n    return; // Якщо масив порожній, нічого не додаємо\n  }\n\n  // Створюємо HTML для всіх нових карток за одну операцію\n  const galleryHTML = images.map(image => createImageCard(image)).join('');\n\n  // Додаємо згенеровану розмітку в кінець контейнера галереї\n  galleryElement.insertAdjacentHTML('beforeend', galleryHTML);\n\n  // Оновлюємо SimpleLightbox після додавання нових елементів до DOM\n  lightbox.refresh();\n}\n\n\n/**\n * Очищає вміст контейнера галереї.\n */\nexport function clearGallery() {\n  galleryElement.innerHTML = ''; // Встановлюємо порожній рядок як вміст\n}\n\n/**\n * Показує індикатор завантаження (лоадер).\n * Потрібно додати відповідні CSS стилі для класу 'visible'.\n */\nexport function showLoader() {\n  if (loaderElement) {\n    loaderElement.classList.add('visible'); // Додаємо клас, що робить лоадер видимим\n  }\n}\n\n/**\n * Приховує індикатор завантаження (лоадер).\n * Потрібно прибрати відповідні CSS стилі для класу 'visible'.\n */\nexport function hideLoader() {\n   if (loaderElement) {\n    loaderElement.classList.remove('visible'); // Прибираємо клас, що робить лоадер видимим\n  }\n}\n\n/**\n * Показує кнопку \"Load more\".\n * Прибирає клас 'is-hidden'.\n */\nexport function showLoadMoreButton() {\n  if (loadMoreButton) {\n    loadMoreButton.classList.remove('is-hidden');\n  }\n}\n\n/**\n * Приховує кнопку \"Load more\".\n * Додає клас 'is-hidden'.\n */\nexport function hideLoadMoreButton() {\n  if (loadMoreButton) {\n    loadMoreButton.classList.add('is-hidden');\n  }\n}\n\n/**\n * Отримує висоту однієї картки галереї для плавного прокручування.\n * @returns {number} Висота першої картки галереї або 0, якщо галерея порожня.\n */\nexport function getGalleryCardHeight() {\n  const firstGalleryItem = galleryElement.querySelector('.gallery-item');\n  if (firstGalleryItem) {\n    const cardRect = firstGalleryItem.getBoundingClientRect();\n    return cardRect.height;\n  }\n  return 0; // Повертаємо 0, якщо елементів немає\n}\n","// js/main.js\nimport { getImagesByQuery } from './js/pixabay-api'; // Імпортуємо функцію запиту до API\nimport {\n  appendGalleryMarkup, // Змінили імпорт, тепер додаємо розмітку\n  clearGallery,\n  showLoader,\n  hideLoader,\n  showLoadMoreButton, // Імпортуємо нові функції для кнопки\n  hideLoadMoreButton,\n  getGalleryCardHeight // Імпортуємо функцію для отримання висоти картки\n} from './js/render-functions'; // Імпортуємо функції рендеру та керування лоадером\nimport iziToast from \"izitoast\"; // Імпортуємо бібліотеку повідомлень\nimport \"izitoast/dist/css/iziToast.min.css\"; // Імпортуємо стилі iziToast\n\n\n// Знаходимо елементи DOM\nconst searchForm = document.querySelector('.form');\nconst searchInput = searchForm.querySelector('input[name=\"search-text\"]');\nconst loadMoreButton = document.querySelector('.load-more-button'); // Знаходимо кнопку \"Load more\"\n\n// Змінні стану для пагінації та поточного запиту\nlet currentQuery = '';\nlet currentPage = 1;\nconst perPage = 15; // Кількість елементів на сторінці, як вимагає ТЗ\nlet totalHits = 0; // Загальна кількість знайдених зображень\n\n// Приховуємо кнопку \"Load more\" при першому завантаженні сторінки\nhideLoadMoreButton();\n\n\n// Обробник події 'submit' для форми пошуку\nsearchForm.addEventListener('submit', async (event) => {\n  event.preventDefault(); // Зупиняємо стандартну дію браузера (перезавантаження сторінки)\n\n  const query = searchInput.value.trim(); // Отримуємо пошуковий запит\n\n  // Перевіряємо, чи не є запит порожнім рядком\n  if (query === '') {\n    iziToast.warning({\n      title: 'Увага',\n      message: 'Будь ласка, введіть пошуковий запит.',\n      position: 'topRight',\n    });\n    return;\n  }\n\n  // Скидаємо стан для нового пошуку\n  currentQuery = query;\n  currentPage = 1;\n  totalHits = 0; // Скидаємо загальну кількість знайдених зображень\n  clearGallery(); // Очищаємо галерею\n  hideLoadMoreButton(); // Приховуємо кнопку \"Load more\" перед новим пошуком\n  showLoader(); // Показуємо індикатор завантаження\n\n  try {\n    // Виконуємо перший запит до Pixabay API\n    const data = await getImagesByQuery(currentQuery, currentPage);\n\n    // Перевіряємо, чи отримано будь-які зображення\n    if (data.hits.length === 0) {\n      iziToast.info({\n        title: 'Інформація',\n        message: 'На жаль, зображень за вашим запитом не знайдено. Спробуйте ще раз!',\n        position: 'topRight',\n      });\n    } else {\n      // Якщо зображення знайдені, відображаємо їх\n      appendGalleryMarkup(data.hits); // Використовуємо appendGalleryMarkup\n      totalHits = data.totalHits; // Зберігаємо загальну кількість знайдених зображень\n\n      // Перевіряємо, чи є ще сторінки для завантаження\n      if (data.hits.length < totalHits) {\n         showLoadMoreButton(); // Показуємо кнопку \"Load more\"\n      } else {\n         // Якщо на першій сторінці вже всі результати\n         iziToast.info({\n           title: 'Інформація',\n           message: \"We're sorry, but you've reached the end of search results.\",\n           position: 'topRight',\n         });\n      }\n    }\n\n  } catch (error) {\n    // Обробка помилок запиту\n     iziToast.error({\n        title: 'Помилка',\n        message: 'Не вдалося завантажити зображення. Спробуйте пізніше.',\n        position: 'topRight',\n      });\n      console.error('Помилка пошуку:', error);\n  } finally {\n    // Виконується завжди\n    hideLoader(); // Приховуємо індикатор завантаження\n    searchForm.reset(); // Очищаємо поле вводу форми\n  }\n});\n\n// Обробник події 'click' для кнопки \"Load more\"\nloadMoreButton.addEventListener('click', async () => {\n  currentPage += 1; // Збільшуємо номер сторінки\n  showLoader(); // Показуємо індикатор завантаження\n  hideLoadMoreButton(); // Приховуємо кнопку \"Load more\" під час завантаження\n\n  try {\n    // Виконуємо запит за наступною сторінкою\n    const data = await getImagesByQuery(currentQuery, currentPage);\n\n    // Додаємо нові зображення до галереї\n    appendGalleryMarkup(data.hits);\n\n    // Перевіряємо, чи є ще сторінки для завантаження\n    const loadedImagesCount = currentPage * perPage;\n    if (loadedImagesCount < totalHits) {\n       showLoadMoreButton(); // Показуємо кнопку \"Load more\"\n    } else {\n       // Якщо дійшли до кінця колекції\n       hideLoadMoreButton(); // Ховаємо кнопку\n       iziToast.info({\n         title: 'Інформація',\n         message: \"We're sorry, but you've reached the end of search results.\",\n         position: 'topRight',\n       });\n    }\n\n    // Плавне прокручування сторінки\n    const cardHeight = getGalleryCardHeight();\n    if (cardHeight > 0) {\n       window.scrollBy({\n         top: cardHeight * 2, // Прокручуємо на дві висоти картки\n         behavior: 'smooth' // Робимо прокручування плавним\n       });\n    }\n\n\n  } catch (error) {\n    // Обробка помилок запиту\n     iziToast.error({\n        title: 'Помилка',\n        message: 'Не вдалося завантажити додаткові зображення. Спробуйте пізніше.',\n        position: 'topRight',\n      });\n      console.error('Помилка завантаження додаткових зображень:', error);\n      showLoadMoreButton(); // На випадок помилки, можливо, варто показати кнопку знову\n  } finally {\n    // Виконується завжди\n    hideLoader(); // Приховуємо індикатор завантаження\n  }\n});\n"],"names":["API_KEY","BASE_URL","getImagesByQuery","query","page","params","axios","error","galleryElement","loaderElement","loadMoreButton","lightbox","SimpleLightbox","createImageCard","webformatURL","largeImageURL","tags","likes","views","comments","downloads","appendGalleryMarkup","images","galleryHTML","image","clearGallery","showLoader","hideLoader","showLoadMoreButton","hideLoadMoreButton","getGalleryCardHeight","firstGalleryItem","searchForm","searchInput","currentQuery","currentPage","perPage","totalHits","event","iziToast","data","cardHeight"],"mappings":"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"}